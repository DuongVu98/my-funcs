apiVersion: tekton.dev/v1
kind: TaskRun
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"PipelineRun","metadata":{"annotations":{"manifestival":"new"},"generateName":"springfn-pack-git-pipeline-run-","labels":{"function.knative.dev/name":"springfn","function.knative.dev/runtime":"springboot","tekton.dev/pipeline":"springfn-pack-git-pipeline"},"namespace":"default"},"spec":{"params":[{"name":"gitRepository","value":"https://github.com/DuongVu98/my-funcs.git"},{"name":"gitRevision","value":"main"},{"name":"contextDir","value":"springfn"},{"name":"imageName","value":"index.docker.io/tony16019/springfn:latest"},{"name":"registry","value":"tony16019"},{"name":"builderImage","value":"ghcr.io/knative/builder-jammy-base:latest"},{"name":"buildEnvs","value":["BP_NATIVE_IMAGE=false","BP_JVM_VERSION=21","BP_MAVEN_ACTIVE_PROFILES=native"]}],"pipelineRef":{"name":"springfn-pack-git-pipeline"},"workspaces":[{"name":"source-workspace","persistentVolumeClaim":{"claimName":"springfn-pack-git-pipeline-pvc"},"subPath":"source"},{"name":"cache-workspace","persistentVolumeClaim":{"claimName":"springfn-pack-git-pipeline-pvc"},"subPath":"cache"},{"name":"dockerconfig-workspace","secret":{"secretName":"springfn-pack-git-pipeline-secret"}}]}}
    manifestival: new
    pipeline.tekton.dev/affinity-assistant: affinity-assistant-a4395de977
    pipeline.tekton.dev/release: 43c0bb9
    tekton.dev/categories: Git
    tekton.dev/displayName: git clone
    tekton.dev/pipelines.minVersion: 0.21.0
    tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le,linux/arm64
    tekton.dev/tags: git
  creationTimestamp: "2025-06-26T18:39:29Z"
  generation: 1
  labels:
    app.kubernetes.io/managed-by: tekton-pipelines
    app.kubernetes.io/version: "0.4"
    function.knative.dev/name: springfn
    function.knative.dev/runtime: springboot
    tekton.dev/memberOf: tasks
    tekton.dev/pipeline: springfn-pack-git-pipeline
    tekton.dev/pipelineRun: springfn-pack-git-pipeline-run-2t52d
    tekton.dev/pipelineRunUID: f5f8983f-edde-4725-ae45-92112b0295d8
    tekton.dev/pipelineTask: fetch-sources
    tekton.dev/task: git-clone
  name: springfn-pack-git-pipeline-run-2t52d-fetch-sources
  namespace: default
  ownerReferences:
  - apiVersion: tekton.dev/v1
    blockOwnerDeletion: true
    controller: true
    kind: PipelineRun
    name: springfn-pack-git-pipeline-run-2t52d
    uid: f5f8983f-edde-4725-ae45-92112b0295d8
  resourceVersion: "2540263"
  uid: f1b4c739-3748-41d7-a64f-4924b4fb4bbe
spec:
  params:
  - name: url
    value: https://github.com/DuongVu98/my-funcs.git
  - name: revision
    value: main
  serviceAccountName: default
  taskRef:
    params:
    - name: kind
      value: task
    - name: name
      value: git-clone
    - name: version
      value: "0.4"
    resolver: hub
  timeout: 1h0m0s
  workspaces:
  - name: output
    persistentVolumeClaim:
      claimName: springfn-pack-git-pipeline-pvc
    subPath: source
status:
  conditions:
  - lastTransitionTime: "2025-06-26T18:39:29Z"
    message: 'pod status "PodScheduled":"False"; message: "0/3 nodes are available:
      1 node(s) didn''t match pod affinity rules, 1 node(s) had untolerated taint
      {node-role.kubernetes.io/control-plane: }, 1 node(s) had volume node affinity
      conflict. preemption: 0/3 nodes are available: 3 Preemption is not helpful for
      scheduling."'
    reason: Pending
    status: Unknown
    type: Succeeded
  podName: springfn-pack-git-pipeline-run-2t52d-fetch-sources-pod
  provenance:
    featureFlags:
      awaitSidecarReadiness: true
      coschedule: workspaces
      enableAPIFields: beta
      enableProvenanceInStatus: true
      enforceNonfalsifiability: none
      maxResultSize: 4096
      resultExtractionMethod: termination-message
      runningInEnvWithInjectedSidecars: true
      verificationNoMatchPolicy: ignore
    refSource:
      digest:
        sha256: b8aa1e4fa91e52d6959dfa6586168706dc38f1d154bd34baeff734080b9d67f8
      uri: https://artifacthub.io/api/v1/packages/tekton-task/tekton-catalog-tasks/git-clone/0.4.0
  startTime: "2025-06-26T18:39:29Z"
  taskSpec:
    description: |-
      These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
      The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
    params:
    - description: Repository URL to clone from.
      name: url
      type: string
    - default: ""
      description: Revision to checkout. (branch, tag, sha, ref, etc...)
      name: revision
      type: string
    - default: ""
      description: Refspec to fetch before checking out revision.
      name: refspec
      type: string
    - default: "true"
      description: Initialize and fetch git submodules.
      name: submodules
      type: string
    - default: "1"
      description: Perform a shallow clone, fetching only the most recent N commits.
      name: depth
      type: string
    - default: "true"
      description: Set the `http.sslVerify` global git config. Setting this to `false`
        is not advised unless you are sure that you trust your git remote.
      name: sslVerify
      type: string
    - default: ""
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      name: subdirectory
      type: string
    - default: ""
      description: Define the directory patterns to match or exclude when performing
        a sparse checkout.
      name: sparseCheckoutDirectories
      type: string
    - default: "true"
      description: Clean out the contents of the destination directory if it already
        exists before cloning.
      name: deleteExisting
      type: string
    - default: ""
      description: HTTP proxy server for non-SSL requests.
      name: httpProxy
      type: string
    - default: ""
      description: HTTPS proxy server for SSL requests.
      name: httpsProxy
      type: string
    - default: ""
      description: Opt out of proxying HTTP/HTTPS requests.
      name: noProxy
      type: string
    - default: "true"
      description: Log the commands that are executed during `git-clone`'s operation.
      name: verbose
      type: string
    - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0
      description: The image providing the git-init binary that this Task runs.
      name: gitInitImage
      type: string
    - default: /tekton/home
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      name: userHome
      type: string
    results:
    - description: The precise commit SHA that was fetched by this Task.
      name: commit
      type: string
    - description: The precise URL that was fetched by this Task.
      name: url
      type: string
    steps:
    - computeResources: {}
      env:
      - name: HOME
        value: /tekton/home
      - name: PARAM_URL
        value: https://github.com/DuongVu98/my-funcs.git
      - name: PARAM_REVISION
        value: main
      - name: PARAM_REFSPEC
      - name: PARAM_SUBMODULES
        value: "true"
      - name: PARAM_DEPTH
        value: "1"
      - name: PARAM_SSL_VERIFY
        value: "true"
      - name: PARAM_SUBDIRECTORY
      - name: PARAM_DELETE_EXISTING
        value: "true"
      - name: PARAM_HTTP_PROXY
      - name: PARAM_HTTPS_PROXY
      - name: PARAM_NO_PROXY
      - name: PARAM_VERBOSE
        value: "true"
      - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
      - name: PARAM_USER_HOME
        value: /tekton/home
      - name: WORKSPACE_OUTPUT_PATH
        value: /workspace/output
      - name: WORKSPACE_SSH_DIRECTORY_BOUND
        value: "false"
      - name: WORKSPACE_SSH_DIRECTORY_PATH
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
        value: "false"
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0
      name: clone
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi

        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir
        fi

        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"
        printf "%s" "${PARAM_URL}" > "/tekton/results/url"
    workspaces:
    - description: The git repo will be cloned onto the volume backing this Workspace.
      name: output
    - description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
      name: ssh-directory
      optional: true
    - description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
      name: basic-auth
      optional: true
